<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在信息过载的时代重新拥抱RSS</title>
    <url>/2019/08/06/%E5%9C%A8%E4%BF%A1%E6%81%AF%E8%BF%87%E8%BD%BD%E7%9A%84%E6%97%B6%E4%BB%A3%E9%87%8D%E6%96%B0%E6%8B%A5%E6%8A%B1RSS/</url>
    <content><![CDATA[<p>我自认为是一个自制力比较差的人，所以我很少用信息流的产品，因为我很清楚自己一但开始刷就会停不下来。但即使这样，微信群的讨论我还是会忍不住参与进去，朋友圈虽然不是“无底洞”，但也总忍不住去看有没有新的朋友圈。<br><span id="more"></span></p>
<p>日子一天天过去，我发现自己的时间都碎片化了，我看的越来越多的是那种几分钟就能看完的公众号文章和那种十几分钟的短视频，不再能静下心来好好的看一本书，也不再能坐下来好好欣赏一部电影。</p>
<p>于是我决定重新用回<a href="https://zh.wikipedia.org/wiki/RSS">RSS</a>，这个曾在十多年前风靡一时的格式，如今已被大部分人所抛弃。人们不再关心自己真正想要的是什么，各种各样的APP不停的推给你信息，却不管你是否真正关心这些信息。</p>
<p>一般大的网站都会有官方提供的RSS订阅，有些没有的也可以在<a href="https://github.com/DIYgod/RSSHub">RSSHub</a>上找到，真的就如他们所说，万物皆可RSS。有了这些RSS链接，我们就需要一个RSS阅读器来管理他们，这里我比较推荐的是<a href="https://www.inoreader.com">Inoreader</a>，Android和iOS平台都有，电脑上可以在浏览器上看，但是体验可能不如移动端。Inoreader有收费的套餐，但是我觉得免费的已经很好用了，150的订阅限制对于我这个轻度用户来说已经绰绰有余。</p>
<p>除了图文的RSS订阅，播客（Podcast）也是RSS的一种。之前用过喜马拉雅，平台虽然方便但是也会带来一些别的问题，广告什么的都还能忍受，资源不够完整和更新不及时就不是小问题了，所以我现在更推荐泛用型播客，和RSS阅读器一样，你可以通过RSS订阅喜欢的主播而不用担心被平台删减或者下架。iOS平台我比较推荐<a href="https://overcast.fm/">Overcast</a>，如果你是Android用户，我之前用过<a href="https://castbox.fm/">Castbox</a>，但是我现在更喜欢Google出的<a href="https://podcasts.google.com/about">Podcast</a>，简洁好用，配合一个好的降噪耳机，你会发现通勤时间也可以这么有趣。</p>
<p>顺便说一句，女朋友玩微博，但是RSSHub的微博订阅最近出问题了，所以我换了<a href="https://github.com/zgq354/weibo-rss">weibo-rss</a>订阅了女朋友的微博，这样就不会错过更新啦！</p>
<p>最后，如果大家对我的博客感兴趣，也可以通过这个<a href="https://rsshub.app/hexo/next/chaizi.one">RSS</a>来订阅我的博客。:)</p>
]]></content>
      <categories>
        <category>生活技巧</category>
      </categories>
      <tags>
        <tag>RSS</tag>
        <tag>Podcast</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐歌单下载</title>
    <url>/2019/05/29/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>随着人们的音乐版权意识变强，现在下载歌曲变得不像以前那么方便了，就算开了会员还是会有下载数量限制，这就很难受。<br><span id="more"></span></p>
<p>网易云音乐一些会员才能下载的歌曲你用手机网页打开却能找到歌曲的真实<code>URL</code>，然后就可以直接下载，这样就绕过了会员下载的限制，用电脑浏览器调成手机模式也一样可以。我觉得网易云音乐应该知道这个<code>bug</code>，但是可能因为分享出去的歌曲只能通过这种方式来打开，所以没办法。但是这种方式还是不能下载已经下架的和那种试听都要会员的歌曲，这也在情理之中。</p>
<p>于是我就想能不能写个脚本来批量下载歌曲，找了个现成的接口，免去了自己去分析网易云音乐请求的麻烦，这里感谢一下<a href="https://api.imjad.cn/cloudmusic.md">网易云音乐接口</a>。</p>
<p>在这个接口的基础上写了一个脚本，可以根据歌单<code>id</code>批量下载网易云音乐歌单中的歌曲，默认下载的是最高的音质，然后自动命名为歌曲名 - 歌手名。这样下载的歌曲还有一个问题就是没有封面图，虽然不影响听，但是看着有点难受，于是我又找了<code>eyed3</code>这个第三方库来给歌曲添加封面图。这里遇到一点问题，就是在调用<code>audiofile.tag.images.set</code>函数写入图片的时候第四个参数也就是描述信息如果传空值或者不传图片就写入不进去，需要注意一下。</p>
<p>具体的代码可以看<a href="https://gist.github.com/crazyczy/bc4b99854254065c2338f4fa0e8371cf">这里</a>，调用的时候传歌单<code>id</code>就可以了，就像这样<code>python cloudmusic.py 123456</code>。</p>
<p>虽然这样方便了下载歌曲，但还是希望大家能支持正版音乐，毕竟没有版权费的歌手哪来的动力写好听的歌呢。</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>为了能更方便地看云端视频</title>
    <url>/2018/03/22/%E4%B8%BA%E4%BA%86%E8%83%BD%E6%9B%B4%E6%96%B9%E4%BE%BF%E5%9C%B0%E7%9C%8B%E4%BA%91%E7%AB%AF%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>为了更方便的看视频，把视频放到云端是一个再好不过的方法。云端有两种，一种是局域网，一种是公网。<br><span id="more"></span></p>
<h1 id="方案篇"><a href="#方案篇" class="headerlink" title="方案篇"></a>方案篇</h1><p>先说局域网，现在市面上的很多路由器都支持外部存储，这就相当于在局域网里搭建了一个共享文件中转站。虽然有更好的NAS解决方案，但是苦于囊中羞涩，我选择了廉价的极路由来搭建我的局域网文件中转站。之前我用过极1s，但是那个只能用SD卡作为存储，不够方便，于是我又从闲鱼上收了一个极2，这一款相比于极1s多了USB接口，可以把我闲置的U盘利用起来。极路由默认使用的是samba协议进行文件传输，当然也可以装插件来实现FTP的文件共享。</p>
<p><img src="https://i.imgur.com/B38yyzL.png" alt=""></p>
<p>公网上我在服务器上搭了一套nextcloud，nextcloud是一套开源的私有云解决方案，支持全平台的设备。换句话说，我放在nextcloud上的视频可以在任何能联网的设备上观看，这就很符合我的心意了哈哈。nextcloud虽然支持全平台，但是实现方案都是同步盘，相当于还是把视频下到本地来看，除了web端并不能直接在线播放，但是web端的在线播放也有弊端，用的h5的原生播放器，功能很是简陋。但是nextcloud提供了WebDAV的访问方式，这个可以结合其他软件使用。</p>
<p><img src="https://i.imgur.com/PdHN36m.jpg" alt=""></p>
<p>局域网文件中转站的好处是传输速度快，但是缺点也显而易见，就是只能在局域网内分享文件。公网上的视频文件可以在任何可以联网的地方看，但是传输速度受限与服务器的带宽。总之各有利弊吧。</p>
<h1 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h1><p>说完云端的两种存储方案，再来谈谈各个平台设备上可以观看云端视频的软件吧。</p>
<p>先说最常用的Windows平台，Windows平台上在资源管理器就可以直接打开samba的文件，播放器方面首推Potplayer，除了支持上面所说的WebDAV的访问方式，还支持HTTP和FTP的远程访问方式，可以说很强大了。</p>
<p>Mac OS平台上暂时未找到好用的支持远程的播放器，但是Finder里是可以直接打开samba协议的视频的，不过速度有点慢，体验不是很好。</p>
<p>IOS端强烈推荐nplayer，功能强大，支持包括WebDAV，FTP，SFTP及samba等各种远程协议的视频播放，反正是我用过的最好的播放器了。</p>
<p>nplayer最近也出了Android端，但是目前只有GP上可以下载，而且售价不菲。<del>在Android上我们可以选择ES+MXPlayer的方案，虽然麻烦一点，但是至少不需要下载下来就可以看啦。</del>(2018.4.2更新，Android上发现了更好用的VLC播放器，支持Samba，FTP，SFTP，NFS等多种远程协议，也支持倍速播放)</p>
<p><img src="https://i.imgur.com/oePfwwm.png" alt=""></p>
<p>另外还有一个叫kodi的软件也是支持全平台的，但是软件风格我感觉装在Android盒子上会更合适一点，晚点可以在我的Remix mini上试一试。</p>
<p>为了能看云端视频真是煞费苦心，但是即使这样传输速度过慢还是很影响体验，以后有钱了还是直接搞一套NAS吧，毕竟千兆万兆普及的时代应该不远了吧。</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>samba</tag>
        <tag>nextcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor不完全填坑指北</title>
    <url>/2017/09/23/Supervisor%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<p>这篇文章不是Supervisor的教程，我只是记录一下我遇到的一些坑。<br><span id="more"></span></p>
<blockquote>
<p><a href="http://supervisord.org" title="http://supervisord.org">Supervisor</a>是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是Python进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用Supervisor同时启动所有应用程序而不是一个一个地敲命令启动。</p>
</blockquote>
<p>记得第一次部署Falsk的时候用过Supervisor，虚拟环境用的是virtualenv，当时也没遇到什么问题，后来用Anaconda来隔离环境以后Supervisor就不好使了，当时比较忙也就没在意，毕竟Supervisor只是一个辅助工具，并不影响网站的使用，只不过是网站挂掉以后要手动重启有点麻烦罢了。正好最近有时间，就想好好找一下Anaconda+Django+uwsgi部署网站时用不了Supervisor的原因。</p>
<p>按照网上的教程安装Supervisor很顺利，但是就是启动uwsgi服务的时候报错，错误提示</p>
<pre><code>FATAL      Exited too quickly (process log may have details)
</code></pre><p>然后去看错误日志，说找不到对应的Module，猜想是环境变量的问题，于是将虚拟环境的PATH变量加到系统的环境变量里面，但还是报错。于是又经过多次查找，发现supervisord.conf里面可以用</p>
<pre><code>environment=KEY=value       ; (key value pairs to add to environment)
</code></pre><p>来指定环境变量，于是在配置文件里面加上了虚拟环境的PATH变量以后就可以了。</p>
<p>总结一下，既要在系统的PATH变量里面加上虚拟环境的PATH变量，也要在conf文件中指定environment，缺一不可。</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>每月一块钱轻松实现科学上网</title>
    <url>/2017/07/02/%E6%AF%8F%E6%9C%88%E4%B8%80%E5%9D%97%E9%92%B1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>之前在<a href="/2016/11/09/Nginx+uWSGI+Django部署小记/" title="Nginx+uWSGI+Django部署小记">Nginx+uWSGI+Django部署小记</a>提到过腾讯云的<a href="https://www.qcloud.com/act/campus">云+校园计划</a>，学生认证之后服务器一个月只要一块钱，虽然配置是低了点，不过拿来搭建一个科学上网的梯子足够了。<br><span id="more"></span><br>腾讯云以前只有国内的服务器可以选，也就没想过可以用它来搭梯子，最近无意中发现多了境外的服务器可以选择，不禁蠢蠢欲动。<br><img src="https://i.imgur.com/5XqtgUB.png" alt=""></p>
<p>我们这里选择香港的服务器，其他那些境外的服务器虽然也可以选择但是价格比较贵，这就违背了我们标题的初衷。</p>
<p>选择最便宜的那个机型然后安装一个Linux系统，这里系统选择很多，CentOS 6+，Debian 7+，Ubuntu 12+都可以，我用的是Ubuntu Server 14.04.1 LTS 32位，再然后按照步骤一步步走下去最终我们就拥有了一个香港的服务器了！</p>
<p>接下来我们需要给服务器装上Shadowsocks的服务端，这里参考<a href="https://teddysun.com/486.html" title="Shadowsocks 一键安装脚本（四合一）">Shadowsocks 一键安装脚本（四合一）</a>，自己用命令行一点点安装也是可以的，但是一键安装脚本会方便很多。具体步骤上面那个网址已经写的很清楚了，这里就不赘述了。</p>
<p>最后我们还需要下载一个Shadowsocks的客户端，将我们设置的参数填进去就可以开心的科学上网了！</p>
]]></content>
      <categories>
        <category>生活技巧</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>CI框架的多文件上传</title>
    <url>/2017/04/12/CI%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>好久没来写博客了。</p>
<p>最近工作中遇到一个棘手的问题——CI框架的多文件上传，经过各种查资料+实践总算是解决了，觉得有必要记录一下遇到的一些坑。<br><span id="more"></span><br>首先是前端页面，form表单的enctype属性要设置为<code>multipart/form-data</code>，表示不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。input控件<code>&lt;input multiple=&quot;&quot; name=&quot;annex[]&quot; type=&quot;file&quot;&gt;</code>中要有multiple属性，要不然在选文件的时候就只能选一个文件，name属性要设置成一个数组，这里如果name属性写成annex那么不管前端页面选了多少文件，后台的$_FILES也只能获取到第一个文件的值。</p>
<p>前端其他没啥好说的，选择完文件后用ajax传到后端，代码类似于这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;……&quot;</span>,</span><br><span class="line">    data: <span class="keyword">new</span> FormData($(<span class="string">&#x27;#formid&#x27;</span>)[<span class="number">0</span>]),</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    processData: <span class="literal">false</span>,</span><br><span class="line">    contentType: <span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里processData设置为false表示不去转换提交的信息，contentType因为前面已经设置了enctype所以这里不需要再设置。</p>
<p>最重要的就是后端怎么来获取到这些文件并把他们上传到服务器了，这里主要思想就是重新构造$_FILES，将$_FILES转换成upload类能够处理的类型，这样才能实现多文件的上传。</p>
<p>传过来的$_FILES是这个样子的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [annex] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [name] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [0] &#x3D;&gt; test1.pdf</span><br><span class="line">                    [1] &#x3D;&gt; test2.pdf</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [type] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [0] &#x3D;&gt; application&#x2F;pdf</span><br><span class="line">                    [1] &#x3D;&gt; application&#x2F;pdf</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [tmp_name] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [0] &#x3D;&gt; &#x2F;tmp&#x2F;phpXV4NMA</span><br><span class="line">                    [1] &#x3D;&gt; &#x2F;tmp&#x2F;phpGIknQm</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [error] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [0] &#x3D;&gt; 0</span><br><span class="line">                    [1] &#x3D;&gt; 0</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            [size] &#x3D;&gt; Array</span><br><span class="line">                (</span><br><span class="line">                    [0] &#x3D;&gt; 140289</span><br><span class="line">                    [1] &#x3D;&gt; 123612</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><br>我们要转换成下面这个样子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [name] &#x3D;&gt; test1.pdf</span><br><span class="line">            [type] &#x3D;&gt; application&#x2F;pdf</span><br><span class="line">            [tmp_name] &#x3D;&gt; &#x2F;tmp&#x2F;phpXV4NMA</span><br><span class="line">            [error] &#x3D;&gt; 0</span><br><span class="line">            [size] &#x3D;&gt; 140289</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [1] &#x3D;&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [name] &#x3D;&gt; test2.pdf</span><br><span class="line">            [type] &#x3D;&gt; application&#x2F;pdf</span><br><span class="line">            [tmp_name] &#x3D;&gt; &#x2F;tmp&#x2F;phpGIknQm</span><br><span class="line">            [error] &#x3D;&gt; 0</span><br><span class="line">            [size] &#x3D;&gt; 123612</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>转换代码大概长这样<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$annex</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$annex</span>[] = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>     =&gt; <span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;name&#x27;</span>][<span class="variable">$k</span>],</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>     =&gt; <span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;type&#x27;</span>][<span class="variable">$k</span>],</span><br><span class="line">        <span class="string">&#x27;tmp_name&#x27;</span> =&gt; <span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>][<span class="variable">$k</span>],</span><br><span class="line">        <span class="string">&#x27;error&#x27;</span>    =&gt; <span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;error&#x27;</span>][<span class="variable">$k</span>],</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>     =&gt; <span class="variable">$_FILES</span>[<span class="string">&#x27;annex&#x27;</span>][<span class="string">&#x27;size&#x27;</span>][<span class="variable">$k</span>],</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_FILES</span> = <span class="variable">$annex</span>;          <span class="comment">//用拼接好的数组去覆盖$_FILES</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;upload_path&#x27;</span>]      = <span class="keyword">$this</span>-&gt;config-&gt;item(<span class="string">&#x27;upload_path&#x27;</span>);</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;allowed_types&#x27;</span>]    = <span class="string">&#x27;pdf&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;encrypt_name&#x27;</span>]     = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;max_size&#x27;</span>]         = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;file_ext_tolower&#x27;</span>] = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;overwrite&#x27;</span>]        = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;library(<span class="string">&#x27;upload&#x27;</span>, <span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$annex</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;upload-&gt;do_upload(<span class="variable">$k</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$filedata</span>[<span class="string">&#x27;annex_name&#x27;</span>]    = <span class="keyword">$this</span>-&gt;upload-&gt;data(<span class="string">&#x27;file_name&#x27;</span>);</span><br><span class="line">        <span class="variable">$filedata</span>[<span class="string">&#x27;annex_oldname&#x27;</span>] = <span class="keyword">$this</span>-&gt;upload-&gt;data(<span class="string">&#x27;orig_name&#x27;</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;account_data-&gt;add_annex(<span class="variable">$filedata</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>这样就OK啦（逃……</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现电影更新自动发微博</title>
    <url>/2016/12/14/Python%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E6%9B%B4%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%BE%AE%E5%8D%9A/</url>
    <content><![CDATA[<p>上一篇博客中我们实现了<a href="http://www.lalilali.com/" title="拉里拉里">拉里拉里</a>网页电影更新自动发邮件的提醒功能，但是代码的可拓展性不强，如果其他人也想要这个功能我还得修改源代码在里面加上收件人的邮箱，很是麻烦，而且如果一下子发好多邮件账号也有被封的风险，所以我就想能不能改用发微博的方式来解决这个问题，毕竟只要关注一下微博帐号就可以收到推送了……<br><span id="more"></span></p>
<p>微博官方是有相关API的，所以只要简单的照着官方文档写就可以了。</p>
<p>首先需要在微博开放平台申请到一个应用，获得应用的app_key和app_secret，这个后面代码里要用。然后，去应用信息-高级信息里面填写回调页，这是什么我也不知道但是照着填就好了，我填的是<a href="https://api.weibo.com/oauth2/default.html">https://api.weibo.com/oauth2/default.html</a> ，这个需要和代码里的callback_url一致。最后用pip装一下sinaweibopy这个库就可以来写代码了。</p>
<p>这里需要吐槽一下微博的API，我本来获取到的是图片的在线url，但是通过url发布带图片的微博需要高权限的API，而高权限就意味着要审核应用，我嫌麻烦，不想去申请审核应用，只能曲线救国一下，就是将图片先保存下来再发布，怎么感觉这个技俩我之前用过？</p>
<p>还有一个比较坑的，新浪会对某些关键词进行屏蔽，比如说<strong>在线观看地址</strong>，我之前发的微博中有这句话，结果发的微博只有自己能看到，其他账号都看不到，一开始以为是代码的问题，后来去掉这句话就好了。</p>
<p>其他好像也没什么有难度的地方，完整代码在下面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> weibo <span class="keyword">import</span> APIClient</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://m.lalilali.com/&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">indexurl = <span class="string">&#x27;http://m.lalilali.com&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://m.lalilali.com/vod-type-id-1-pg-1.html&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsoup</span>():</span></span><br><span class="line">    r = s.get(url, headers=header)</span><br><span class="line">    <span class="keyword">return</span> BeautifulSoup(r.content, <span class="string">&#x27;html.parser&#x27;</span>, from_encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettitles</span>(<span class="params">soup</span>):</span></span><br><span class="line">    b = soup.find_all(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;sTit&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">yield</span> i.a.string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_access_token</span>(<span class="params">app_key, app_secret, callback_url</span>):</span></span><br><span class="line">    client = APIClient(app_key=app_key, app_secret=app_secret,</span><br><span class="line">                       redirect_uri=callback_url)</span><br><span class="line"></span><br><span class="line">    auth_url = client.get_authorize_url()</span><br><span class="line">    <span class="built_in">print</span> auth_url</span><br><span class="line"></span><br><span class="line">    code = raw_input(<span class="string">&quot;Input code:&quot;</span>)</span><br><span class="line">    r = client.request_access_token(code)</span><br><span class="line">    access_token = r.access_token</span><br><span class="line">    expires_in = r.expires_in</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;access_token:&#x27;</span>, access_token</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;expires_in:&#x27;</span>, expires_in</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> access_token, expires_in</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    app_key = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    app_secret = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    callback_url = <span class="string">&#x27;https://api.weibo.com/oauth2/default.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    access_token, expires_in = get_access_token(</span><br><span class="line">        app_key, app_secret, callback_url)</span><br><span class="line"></span><br><span class="line">    client = APIClient(app_key=app_key, app_secret=app_secret,</span><br><span class="line">                       redirect_uri=callback_url)</span><br><span class="line">    client.set_access_token(access_token, expires_in)</span><br><span class="line"></span><br><span class="line">    soup = getsoup()</span><br><span class="line">    titlelist = <span class="built_in">list</span>(gettitles(soup))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> i.img[<span class="string">&#x27;title&#x27;</span>] <span class="keyword">in</span> titlelist:</span><br><span class="line">                    msg = i.img[<span class="string">&#x27;title&#x27;</span>].decode(</span><br><span class="line">                        <span class="string">&#x27;utf-8&#x27;</span>) + <span class="string">&#x27;，豆瓣&#x27;</span> + i.div.span.string + <span class="string">&#x27;分http://www.lalilali.com&#x27;</span> + i.a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span> msg</span><br><span class="line">                    req = requests.get(i.img[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(i.img[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">                        code.write(req.content)</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    f = <span class="built_in">open</span>(i.img[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">                    r = client.statuses.upload.post(</span><br><span class="line">                        status=msg.decode(<span class="string">&#x27;utf-8&#x27;</span>), pic=f)</span><br><span class="line">                    f.close()</span><br><span class="line">                    <span class="built_in">print</span> i.img[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            titlelist = <span class="built_in">list</span>(gettitles(soup))</span><br><span class="line">            time.sleep(<span class="number">60</span>)</span><br><span class="line">            soup = getsoup()</span><br><span class="line">            <span class="built_in">print</span> time.ctime()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">            time.sleep(<span class="number">600</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如图，</p>
<p><img src="https://i.imgur.com/AOXuFYM.png" alt=""></p>
<p>这还不赶紧关注一波？（逃……</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现电影更新自动邮箱提醒</title>
    <url>/2016/12/11/Python%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E6%9B%B4%E6%96%B0%E8%87%AA%E5%8A%A8%E9%82%AE%E7%AE%B1%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<p><a href="http://www.lalilali.com/" title="拉里拉里">拉里拉里</a>是一个电影资源网站，每天都会更新一些比较新的电影，但是每天打开好多次网站就为了看自己想看的电影有没有更新是一件很累的事，我就想能不能用Python来实现电影更新自动提醒。<br><span id="more"></span></p>
<p>简单思路是这样的，用Python每隔一段时间去获取页面信息，然后跟之前获取的信息作比较，如果一样就不管，反之说明有更新，这时候把更新的信息发送到邮箱即可，包括电影名，豆瓣评分，海报图片以及链接地址。</p>
<p>Python的smtplib提供了一种很方便的途径发送电子邮件，它对SMTP协议进行了简单的封装，如果我们本机没有sendmail访问，可以使用其他邮件服务商的SMTP访问，我这里选用的是网易邮箱。</p>
<p>一开始我打算从网易邮箱发到QQ邮箱，单发文字邮件没什么问题，但后来在邮件中插入了图片就发不出去了，好像是因为反垃圾邮件机制的缘故，最后没办法暂时只能选择同一邮箱作为发件和收件邮箱。</p>
<p>邮件的HTML文本中一般邮件服务商添加外链是无效的，正确添加图片的示例如下面的代码所示。</p>
<blockquote>
<p>main.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> mail</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#x27;</span>,<span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;http://m.lalilali.com/&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">indexurl = <span class="string">&#x27;http://m.lalilali.com&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://m.lalilali.com/vod-type-id-1-pg-1.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsoup</span>():</span></span><br><span class="line">    r = s.get(url,headers=header)</span><br><span class="line">    <span class="keyword">return</span> BeautifulSoup(r.content,<span class="string">&#x27;html.parser&#x27;</span>,from_encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettitles</span>(<span class="params">soup</span>):</span></span><br><span class="line">    b = soup.find_all(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;sTit&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">yield</span> i.a.string</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    soup = getsoup()</span><br><span class="line">    titlelist = <span class="built_in">list</span>(gettitles(soup))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = soup.find_all(<span class="string">&#x27;li&#x27;</span>)        </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> i.img[<span class="string">&#x27;title&#x27;</span>] <span class="keyword">in</span> titlelist:</span><br><span class="line">                    mail.sendemail(i.img[<span class="string">&#x27;title&#x27;</span>],i.div.span.string,i.a[<span class="string">&#x27;href&#x27;</span>],i.img[<span class="string">&#x27;src&#x27;</span>])</span><br><span class="line">                    <span class="built_in">print</span> i.img[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            titlelist = <span class="built_in">list</span>(gettitles(soup))</span><br><span class="line">            time.sleep(<span class="number">60</span>)</span><br><span class="line">            soup = getsoup()</span><br><span class="line">            <span class="built_in">print</span> time.ctime()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">600</span>)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>mail.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">mail_host=<span class="string">&#x27;smtp.xxx.com&#x27;</span> <span class="comment"># 设置服务器</span></span><br><span class="line">mail_user=<span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 用户名</span></span><br><span class="line">mail_pass=<span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 密码</span></span><br><span class="line"></span><br><span class="line">sender = <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 发送邮箱</span></span><br><span class="line">receivers = [<span class="string">&#x27;xxx&#x27;</span>] <span class="comment"># 接收邮箱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendemail</span>(<span class="params">title,score,url,imgurl</span>):</span></span><br><span class="line"></span><br><span class="line">    msgRoot = MIMEMultipart()</span><br><span class="line">    msgRoot[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;lalilali &lt;xxx&gt;&#x27;</span> <span class="comment"># 发送邮箱</span></span><br><span class="line">    msgRoot[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># 接收邮箱</span></span><br><span class="line"></span><br><span class="line">    msgRoot[<span class="string">&#x27;Subject&#x27;</span>] = Header(title+<span class="string">&#x27; &#x27;</span>+score+<span class="string">u&#x27;分&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    msgAlternative = MIMEMultipart(<span class="string">&#x27;alternative&#x27;</span>)</span><br><span class="line">    msgRoot.attach(msgAlternative)</span><br><span class="line"></span><br><span class="line">    mail_msg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;%s&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;豆瓣：%s分&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;a href=&quot;http://www.lalilali.com%s&quot;&gt;在线观看地址&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;img src=&quot;cid:image1&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> % (title,score,url)</span><br><span class="line"></span><br><span class="line">    msgAlternative.attach(MIMEText(mail_msg, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定图片为当前目录</span></span><br><span class="line">    fp = requests.get(imgurl)</span><br><span class="line">    msgImage = MIMEImage(fp.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义图片ID，在HTML 文本中引用</span></span><br><span class="line">    msgImage.add_header(<span class="string">&#x27;Content-ID&#x27;</span>, <span class="string">&#x27;&lt;image1&gt;&#x27;</span>)</span><br><span class="line">    msgRoot.attach(msgImage)</span><br><span class="line"></span><br><span class="line">    smtpObj = smtplib.SMTP(mail_host,<span class="string">&#x27;25&#x27;</span>) </span><br><span class="line">    smtpObj.login(mail_user,mail_pass)  </span><br><span class="line">    smtpObj.sendmail(sender, receivers, msgRoot.as_string())</span><br><span class="line">    smtpObj.quit()</span><br></pre></td></tr></table></figure>
<p>效果如图，</p>
<p><img src="https://i.imgur.com/FKp1Rs4.png" alt=""></p>
<p><img src="https://i.imgur.com/hvbgDOH.png" alt=""></p>
<p>小结一下，</p>
<ol>
<li><p>一开始爬取的是拉里拉里的电脑版页面，用BeautifulSoup匹配得很蛋疼，后来发现手机版的页面简单得多，但是获取页面时要指定一下User-Agent不然可能会不成功。</p>
</li>
<li><p>设置的1分钟去获取一次页面数据，但是过一会就会抛异常退出，我猜可能是把我误认为是Dos攻击了，然后我加了一个异常处理，遇到异常停10分钟再去获取，目前运行良好.</p>
</li>
<li><p>发邮件只能满足个人需求，后面看能不能改成自动发微博这样大家就可以用啦……</p>
</li>
</ol>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Django实现教务系统api</title>
    <url>/2016/11/23/Python+Django%E5%AE%9E%E7%8E%B0%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9Fapi/</url>
    <content><![CDATA[<p>前两天有小伙伴看到了我的网站<a href="http://njnu.chaiziyi.com.cn/" title="http://njnu.chaiziyi.com.cn/">查南师，你想要的信息都在这里！</a>，想做个类似的安卓app玩玩，问我有没有api接口，因为当时没考虑这么多，前后端写在了一起也就没有api一说，不过既然人家都这么说了，干脆就来写个api吧，也方便后面自己做点其他好玩的东西。<br><span id="more"></span></p>
<p>因为主要是提供api接口，所以前端页面就只写了个主页用来介绍api的使用方法。</p>
<p><img src="https://i.imgur.com/C0uHOTh.png" alt=""></p>
<p>目前一共是有4个api，包括登录、基本信息、学业成绩和课表查询，具体的使用说明可以去<a href="http://api.chaiziyi.com.cn/jwgl/" title="南师大教务系统API使用说明">南师大教务系统API使用说明</a>上看，这里就不赘述了，谈一下用到的一些新东西。</p>
<p>第一个是python的xmltodict库，用来将xml格式的文字转成字典，然后可以再用json库的dumps函数将字典转成json，这里的基本信息api就是用的这个，比自己手动去解析要方便很多。</p>
<p>第二个，教务系统查询课表时参数用了base64编码，我一开始想直接用<code>base64.b64encode()</code>对提交数据进行编码发现报错，查了一下python3里面这个函数有了一点点不同，之前python2是可以直接对str进行编码的，但是现在python3不行了，得先对字符串进行utf-8编码，又学了一个新知识。</p>
<p>第三个，在Django里面，获取request里面的cookie用的是<code>request.COOKIES</code>，设置cookie要用<code>response.set_cookie</code>，这里response是一个事先定义的HttpResponse对象。</p>
<p>最后一个，在return时加上<code>content_type=&quot;application/json&quot;</code>才会返回我们所希望的json格式的数据，否则返回的数据格式会是默认的<code>text/html</code>。</p>
<p>见Github:<a href="https://github.com/crazyczy/njnu-jwgl-api" title="njnu-jwgl-api">njnu-jwgl-api</a></p>
<p>有了api好像又可以干一些好玩的事了，我真是个闲不下来的人啊（逃……</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Django实现个人信息查询网站（三）</title>
    <url>/2016/11/18/Python+Django%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>上次FACE++申请的上线版竟然通过了，真开心，于是迫不及待地在<del>查南师(已过期)</del>里面加上了以图找人的功能。<br><span id="more"></span></p>
<p>先放一张申请通过的上线版的图开心一下</p>
<p><img src="https://i.imgur.com/7R7o6xk.png" alt=""></p>
<p>其实这个所谓的以图找人功能并没有什么难度，都是调用的FACE++的api，要说遇到的最大的困难可能就是我的Django是写在Python3环境下的，而FACE++却不支持Python3，所以我只能手动去调用接口而不能直接用官方现成的SDK，有点难过……</p>
<p>图片来源可以是在线URL也可以是本地上传的图片，在线URL很好写，直接传URL给接口就好了，但是本地上传的要传图片的二进制文件给接口，在官方的SDK有一个现成的File函数可以转换，但我这里用不了就有点棘手，于是我想了一个讨巧的办法就是把图片先保存到服务器这时候就有了图片的URL再调用第一个接口就完美解决了。</p>
<p>下面一段就是手动去调用接口的代码，因为一个GROUP只能存10000个Person，所以我只能分成多个GROUP来存，然后分别在每个GROUP中找出最相似的3个人最后按照相似度给所有的人排个序并返回最相似的10个人的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">API_KEY = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">API_SECRET = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">apiurl = <span class="string">&#x27;https://apicn.faceplusplus.com/v2/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">facebyurl</span>(<span class="params">url</span>):</span></span><br><span class="line">    li = <span class="built_in">list</span>()</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span> : API_KEY,</span><br><span class="line">        <span class="string">&#x27;api_secret&#x27;</span> : API_SECRET</span><br><span class="line">    &#125;</span><br><span class="line">    grouplist = s.get(apiurl+<span class="string">&#x27;info/get_group_list&#x27;</span>,params=data).json()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> grouplist[<span class="string">&#x27;group&#x27;</span>]:</span><br><span class="line">        data = &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>:url,</span><br><span class="line">        <span class="string">&#x27;api_key&#x27;</span> : API_KEY,</span><br><span class="line">        <span class="string">&#x27;api_secret&#x27;</span> : API_SECRET,</span><br><span class="line">        <span class="string">&#x27;group_name&#x27;</span>:each[<span class="string">&#x27;group_name&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = s.get(apiurl+<span class="string">&#x27;recognition/identify&#x27;</span>,params=data)</span><br><span class="line">            li += (r.json()[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;candidate&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(li,key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;confidence&#x27;</span>],reverse = <span class="literal">True</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>这一张是用的本来里面的证件照，相似度不是100的原因是一个Person可能不止一张照片，识别的时候都会考虑到。</p>
<p><img src="https://i.imgur.com/1TnunsE.png" alt=""></p>
<p>本地传的照片就没有那么高的识别率了，但还是能准确识别出照片里的小伙伴，说实话其他人长得跟他还真的挺像的。</p>
<p><img src="https://i.imgur.com/QkVtGu3.png" alt=""></p>
<p>可能是分了多个GROUP的缘故，每次查询都特别慢，甚至接近30s，用户体验大打折扣，看后面能不能自己搞个机器学习算法提高点速度，暂时就这样吧。</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>Face++</tag>
      </tags>
  </entry>
  <entry>
    <title>从美国大面积断网谈学校物联网设备安全</title>
    <url>/2016/11/15/%E4%BB%8E%E7%BE%8E%E5%9B%BD%E5%A4%A7%E9%9D%A2%E7%A7%AF%E6%96%AD%E7%BD%91%E8%B0%88%E5%AD%A6%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>上个月21号美国大部分地区都遭受了网络中断的问题，原因是Dyn的服务器遭受了黑客的DDoS攻击，大量的攻击来自智能设备，也就是所谓的物联网设备。<br><span id="more"></span></p>
<p>更准确点讲，这次的事件是物联网设备的弱密码所致，这让我意识到我们身边可能也存在着大量使用弱密码的物联网设备，于是我用nmap扫了一下学校服务器的端口，然后找出可能的服务器再用弱密码一试，真的是吓了一跳。</p>
<p><img src="https://i.imgur.com/wKMMHDr.png" alt=""></p>
<p>上面截的那张图片只是众多摄像头服务器中的一个，挑这个是因为我觉得这张最具有代表性，这些机房是我们平时上机的地方，更是江苏省高考数学阅卷的地方，这么重要的地方都不注意摄像头安全，不能不让人担心。</p>
<p>出于安全考虑，怎么扫描然后找出这些服务器的步骤就不贴出来了，大家看看就好。</p>
<p>随着人们越来越依赖互联网，网络安全变得尤为重要。而随着智能设备的增加，智能设备的安全漏洞也日益严重，这里只想提醒大家千万不要为了方便而去使用弱密码，说不定哪一天你的设备就变成了别人用来发动DDoS攻击的肉鸡。</p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>nmap</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>用微软小冰的颜值打分接口为证件照打分</title>
    <url>/2016/11/13/%E7%94%A8%E5%BE%AE%E8%BD%AF%E5%B0%8F%E5%86%B0%E7%9A%84%E9%A2%9C%E5%80%BC%E6%89%93%E5%88%86%E6%8E%A5%E5%8F%A3%E4%B8%BA%E8%AF%81%E4%BB%B6%E7%85%A7%E6%89%93%E5%88%86/</url>
    <content><![CDATA[<p>之前想为爬的证件照做个颜值打分程序来着，奈何水平有限，对机器学习知之甚少，就一直搁置着没有做。前两天才想起来微软的人工智能小冰好像可以给照片打分，那干脆就先利用小冰做个简单的颜值打分吧。<br><span id="more"></span></p>
<p><a href="http://kan.msxiaobing.com/V3/Portal" title="http://kan.msxiaobing.com/V3/Portal">http://kan.msxiaobing.com/V3/Portal</a>就是微软小冰用来给照片打分的网址了，我们打开F12开发者工具，然后提交一张照片并观察整个过程。</p>
<p>主要的步骤有两个，一是上传图片，这里网页上将图片文件先转换成二进制然后进行Base64编码最后提交，返回了一个图片的在线地址，二是分析图片，这里提交的data里面就包括了刚刚返回的图片地址，这时候会返回一堆数据，其中对我们有用的除了分数那一项，还有打分后的图片地址，就是在照片上加上一个带分数的框框的图片。</p>
<p>明白了基本原理以后，代码写起来就简单多了。这里我们将分数的结果写入到了csv文件里面，然后用一个文件夹保存了带有分数的照片。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;images&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&quot;images&quot;</span>)</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://kan.msxiaobing.com/V3/Portal&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&#x27;http://kan.msxiaobing.com/Api/Image/UploadBase64&#x27;</span></span><br><span class="line">url2 = <span class="string">&#x27;http://kan.msxiaobing.com/Api/ImageAnalyze/Process?service=beauty&amp;tid=1f8af41c7a3b49cd8bcb9ea2f003de1d&#x27;</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">csvfile = file(<span class="string">&#x27;info.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">photo_path = <span class="string">&#x27;F:/img&#x27;</span></span><br><span class="line"><span class="keyword">for</span> path, subdirs, files <span class="keyword">in</span> os.walk(photo_path):</span><br><span class="line">    <span class="comment"># print path, subdirs, files</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> files:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path + <span class="string">&#x27;/&#x27;</span> + img, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            image_data = f.read().encode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = s.post(url1, data=image_data, headers=header)</span><br><span class="line">            res = json.loads(r.text)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;MsgId&#x27;</span>: <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">                <span class="string">&#x27;CreateTime&#x27;</span>: <span class="built_in">int</span>(time.time()),</span><br><span class="line">                <span class="string">&#x27;content[imageUrl]&#x27;</span>: res[<span class="string">&#x27;Host&#x27;</span>] + res[<span class="string">&#x27;Url&#x27;</span>] </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            r = s.post(url2, data=data, headers=header)</span><br><span class="line">            res = json.loads(r.text)</span><br><span class="line">            imageUrl = res[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;imageUrl&#x27;</span>]</span><br><span class="line">            req = s.get(imageUrl)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/&#x27;</span> + img, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> code:</span><br><span class="line">                code.write(req.content)</span><br><span class="line">            writer = csv.writer(csvfile)</span><br><span class="line">            writer.writerow([img,res[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;metadata&#x27;</span>][<span class="string">&#x27;FBR_Score0&#x27;</span>]])</span><br><span class="line">            <span class="built_in">print</span> img</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">csvfile.close()</span><br></pre></td></tr></table></figure>
<p>可能是审美有别吧，试了一些照片总觉得小冰打出来的分数跟我的审美有些不符，加上打分太慢了，这几万张证件照还不知道要跑到什么时候，所以先这样了，等后面有时间可以考虑来写一个有监督的机器学习颜值打分程序……</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>初识FACE++</title>
    <url>/2016/11/12/%E5%88%9D%E8%AF%86FACE++/</url>
    <content><![CDATA[<p>之前爬了学校的好多证件照，想着能不能做个人脸识别，如果顺利的话说不定还能整合到上次那个网站里面做个以图找人的功能。查了一下，发现了FACE++这个好东西。<br><span id="more"></span></p>
<p><img src="https://i.imgur.com/yjn0zeN.png" alt=""></p>
<p><a href="http://www.faceplusplus.com.cn/" title="FACE++">FACE++</a>提供了免费的API接口，可以很方便的对人脸进行识别分析，而且官方也提供了<a href="https://github.com/FacePlusPlus/facepp-python-sdk/tree/v2.0" title="Python SDK &amp; 命令行工具">Python SDK &amp; 命令行工具</a>，正合我意。</p>
<p>但是现在还有一个问题，我要做的人脸识别程序需要将数万张证件照都导入进去然后训练，但是现在的权限是开发版，好像只能存储100个人的信息，这对于我要做的人脸识别来说是远远不够的，所以我只能抱着试试看的态度申请了一下上线版，这个版本是没有权限限制的，但是目前还显示在审核中，感觉有点悬……</p>
<p>趁着还在审核中，不妨先来简单练练手，比方说第一个API <code>/detection/detect</code>，功能是检测一张照片中的人脸信息（脸部位置、年龄、种族、性别等等），我就想不如来写个循环，把所有照片的信息识别出来然后保存到文件中，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">API_KEY = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">API_SECRET = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> facepp <span class="keyword">import</span> API,File</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">api = API(API_KEY, API_SECRET)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;img/&#x27;</span></span><br><span class="line"></span><br><span class="line">reader = csv.reader(<span class="built_in">open</span>(<span class="string">&#x27;id.csv&#x27;</span>))</span><br><span class="line">csvfile = file(<span class="string">&#x27;info.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> reader:</span><br><span class="line">    path = url + <span class="built_in">id</span>[<span class="number">0</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        face = api.detection.detect(img = File(path),model=<span class="string">&#x27;oneface&#x27;</span> ,attribute=[<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;race&#x27;</span>, <span class="string">&#x27;smiling&#x27;</span>, <span class="string">&#x27;glass&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        li = <span class="built_in">list</span>()</span><br><span class="line">        li.append(<span class="built_in">id</span>[<span class="number">0</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;img_width&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;img_height&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;width&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;height&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;confidence&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;gender&#x27;</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;age&#x27;</span>][<span class="string">&#x27;range&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;age&#x27;</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;race&#x27;</span>][<span class="string">&#x27;confidence&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;race&#x27;</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;glass&#x27;</span>][<span class="string">&#x27;confidence&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;glass&#x27;</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;attribute&#x27;</span>][<span class="string">&#x27;smiling&#x27;</span>][<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;eye_left&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;eye_left&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;eye_right&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;eye_right&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;mouth_left&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;mouth_left&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;mouth_right&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;mouth_right&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;center&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;center&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;nose&#x27;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        li.append(face[<span class="string">&#x27;face&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;position&#x27;</span>][<span class="string">&#x27;nose&#x27;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        writer = csv.writer(csvfile)</span><br><span class="line">        writer.writerow(li)</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">id</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">csvfile.close()</span><br></pre></td></tr></table></figure>
<p>总的来说识别识别还算准确，根据识别后的数据做了两张男女性别比例的图表，跟事实情况应该差不太多，感受一下我大南师可怕的男女比例。</p>
<p><img src="https://i.imgur.com/SDD1fgJ.png" alt=""></p>
<p>以及我们学院与学校大环境格格不入的男女比例。</p>
<p><img src="https://i.imgur.com/HhRSm1V.png" alt=""></p>
<p>希望上线版的审核能过吧，要不然真的只能做个简单版的人脸识别玩玩了。</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Face++</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+uWSGI+Django部署小记</title>
    <url>/2016/11/09/Nginx+uWSGI+Django%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>写网站，部署永远是一个回避不了而且让人头疼的问题，为了方便自己以后部署，这里把部署的过程以及遇到的坑记下来。<br><span id="more"></span></p>
<p>这里强烈推荐一下腾讯云的云+校园计划，服务器1块钱一个月，域名还不要钱，虽然配置低了点，不过拿来练手足够了。</p>
<p>装上Ubuntu14.04的系统，我们就可以开始部署我们的Django工程了。</p>
<p>为了避免部署的多个工程之间互相干扰，我们需要为每一个工程创建单独的环境。之前用过virtualenv，后来发现了更好用的anaconda就果断抛弃了virtualenv。</p>
<h2 id="1-安装Anaconda"><a href="#1-安装Anaconda" class="headerlink" title="1. 安装Anaconda"></a>1. 安装Anaconda</h2><p>在<a href="https://www.continuum.io/downloads#linux" title="官网">官网</a>下载最新版的Anaconda For Linux，我这里是4.2.0版本</p>
<pre><code>wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh
</code></pre><p>然后安装</p>
<pre><code>bash Anaconda3-4.2.0-Linux-x86_64.sh
</code></pre><p>装的时候有一个选项是将路径加到环境变量里面，如果忘了选可以用</p>
<pre><code>export PATH=&quot;/home/username/anaconda/bin:$PATH&quot;
</code></pre><p>手动加入到环境变量里面，然后用</p>
<pre><code>conda create -n &lt;环境名字&gt; &lt;安装哪些packages&gt;
</code></pre><p>来创建虚拟环境，最后用</p>
<pre><code>source activate &lt;环境名字&gt;
</code></pre><p>进入虚拟环境</p>
<h2 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2. 安装Nginx"></a>2. 安装Nginx</h2><pre><code>sudo apt-get install nginx
</code></pre><h2 id="3-安装uWSGI"><a href="#3-安装uWSGI" class="headerlink" title="3. 安装uWSGI"></a>3. 安装uWSGI</h2><pre><code>pip install uwsgi
</code></pre><h2 id="4-添加配置文件"><a href="#4-添加配置文件" class="headerlink" title="4. 添加配置文件"></a>4. 添加配置文件</h2><p>配置文件主要有两个，一个是Nginx那边的<code>.conf</code>文件，放在<code>/etc/nginx/conf.d/</code>目录下面，老的Nginx版本好像是去修改<code>/etc/nginx/</code>目录下的<code>nginx.conf</code>，这里算是一个坑吧，因为我装的Nginx版本比较新，所以按照老版本的方法试了好久都不能成功，还有一个是uWSGI的<code>.ini</code>文件，放在工程目录下面，这里贴一下两个示例配置文件</p>
<blockquote>
<p>xxx.conf</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen         80; </span><br><span class="line">    server_name    &lt;这里填用来访问的网址&gt;;</span><br><span class="line">    charset UTF-8;</span><br><span class="line">    access_log      &#x2F;var&#x2F;log&#x2F;nginx&#x2F;xxx_access.log;</span><br><span class="line">    error_log       &#x2F;var&#x2F;log&#x2F;nginx&#x2F;xxx_error.log;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">    &#125;   </span><br><span class="line">    location &#x2F;static &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">        autoindex on; </span><br><span class="line">        add_header Cache-Control private;</span><br><span class="line">        alias &#x2F;home&#x2F;ubuntu&#x2F;&lt;工程名&gt;&#x2F;static&#x2F;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>xxx_uwsgi.ini</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># xxx_uwsgi.ini file</span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># Django-related settings</span><br><span class="line"></span><br><span class="line">socket &#x3D; :8000</span><br><span class="line"></span><br><span class="line"># the base directory (full path)</span><br><span class="line">chdir           &#x3D; &#x2F;home&#x2F;ubuntu&#x2F;&lt;工程名&gt;</span><br><span class="line"></span><br><span class="line"># Django s wsgi file</span><br><span class="line">module          &#x3D; xxx.wsgi</span><br><span class="line"></span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          &#x3D; true</span><br><span class="line"></span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       &#x3D; 4</span><br><span class="line"></span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line"># chmod-socket  &#x3D; 664</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          &#x3D; true</span><br></pre></td></tr></table></figure>
<p>这里注意<code>xxx.conf</code>中的<code>uwsgi_pass</code>端口号和<code>xxx_uwsgi.ini</code>中的<code>socket</code>要保持一致，Nginx和uWSGI就靠这个通信了。</p>
<h2 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h2><p>先用</p>
<pre><code>sudo /etc/init.d/nginx restart
</code></pre><p>来重启一下Nginx，最后用</p>
<pre><code>uwsgi --ini /home/ubuntu/&lt;工程名&gt;/xxx_uwsgi.ini
</code></pre><p>来启动uWSGI应该就可以访问了。</p>
<p>如果嫌每次都要输<code>export PATH=/home/ubuntu/anaconda/bin:$PATH</code>麻烦，可以在安装Anaconda后将安装路径添加到系统环境变量中，步骤如下：</p>
<ol>
<li>在终端输入<code>sudo vim /etc/profile</code>，打开profile文件</li>
<li>在文件末尾添加一行<code>export PATH=/home/ubuntu/anaconda/bin:$PATH</code></li>
<li><code>source /etc/profile</code>更新profile文件即可</li>
</ol>
<p>另外可以用Supervisor来守护uwsgi进程，免去uwsgi进程挂了或者服务器重启的时候还要手动去启动uwsgi进程的烦恼，详情见<a href="/2017/09/23/Supervisor不完全填坑指北/" title="Supervisor不完全填坑指北">Supervisor不完全填坑指北</a></p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>Nginx</tag>
        <tag>uWSGI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Django实现个人信息查询网站（二）</title>
    <url>/2016/11/08/Python+Django%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>不知不觉拖了近两个月，总算把第一版网站上线了，在线访问网址<a href="http://njnu.chaiziyi.com.cn/" title="http://njnu.chaiziyi.com.cn/">查南师，你想要的信息都在这里！</a><br><span id="more"></span></p>
<p>网站现在主要就4个功能，其中无需登录就可以使用的只有免验证码快速查询教务系统成绩，另外的根据学号查询个人信息、根据姓名查询个人信息和免密码查询教务系统成绩3个功能需要登录以后才能使用。</p>
<p>根据学号查询个人信息和根据姓名查询个人信息查的是之前爬的学校的数据，免密码查询教务系统成绩是利用的教务系统的一个漏洞，这个之前写GUI的时候也提到过。</p>
<p>登录系统用的Django自带的认证系统，发现比自己写登录认证方便多了，还安全，需要登录的页面只要加上一个<code>@login_required</code>的装饰器就好了。</p>
<p>放点网站截图吧，无图无真相。</p>
<blockquote>
<p>首页</p>
</blockquote>
<p><img src="https://i.imgur.com/mhOktBv.png" alt=""></p>
<blockquote>
<p>免验证码快速查询教务系统成绩</p>
</blockquote>
<p><img src="https://i.imgur.com/4qAp8SL.png" alt=""></p>
<blockquote>
<p>根据学号查询个人信息</p>
</blockquote>
<p><img src="https://i.imgur.com/eltheoI.png" alt=""></p>
<blockquote>
<p>根据姓名查询个人信息</p>
</blockquote>
<p><img src="https://i.imgur.com/h4o7ilU.png" alt=""></p>
<blockquote>
<p>免密码查询教务系统成绩</p>
</blockquote>
<p><img src="https://i.imgur.com/iYbhQKs.png" alt=""></p>
<p>上一篇提到的验证码、以图找图还有Facemash等功能都还没写，一是水平有限，二是想着先做出点能用的东西出来，怕拖着拖着最后什么都写不出来，后面有时间再加功能吧。</p>
<p>之前说的传Github想想还是不了，毕竟很多都是隐私的东西，自己玩玩就好了，不想被查水表。</p>
<p>最后，注册功能暂时就不开放了（逃……</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现教务系统快速查分（三）</title>
    <url>/2016/11/03/Python%E5%AE%9E%E7%8E%B0%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%BF%AB%E9%80%9F%E6%9F%A5%E5%88%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>上次说要在3.0版本把验证码给去了，嗯。<br><span id="more"></span></p>
<p>之前用过一次pytesseract来识别验证码，所以这次写也没什么难度，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Verify</span>():</span></span><br><span class="line">    r = s.get(url2, headers=header)</span><br><span class="line">    buff = StringIO.StringIO(r.content)</span><br><span class="line">    im = Image.<span class="built_in">open</span>(buff)</span><br><span class="line">    im = im.<span class="built_in">filter</span>(ImageFilter.MedianFilter())</span><br><span class="line">    enhancer = ImageEnhance.Contrast(im)</span><br><span class="line">    im = enhancer.enhance(<span class="number">2</span>)</span><br><span class="line">    im = im.convert(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    vcode = pytesseract.image_to_string(im, config=<span class="string">&#x27;-psm 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> vcode</span><br></pre></td></tr></table></figure>
<p>获取验证码然后稍微处理一下再识别会大大提高识别率，但仍然不能保证100%的识别正确率，所以这里的办法就是不断识别直到识别出为止，正好教务网站对于验证码错误有个特别的返回值401，这里就简单多了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">status = getStatus(username, pwd, yzm)</span><br><span class="line"><span class="keyword">while</span>(status[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;401&#x27;</span>):</span><br><span class="line">    yzm = Verify()</span><br><span class="line">    status = getStatus(username, pwd, yzm)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>左上角的那个图标本来只需要下面两行代码就可以实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.icon = wx.Icon(<span class="string">&#x27;icon.ico&#x27;</span>, wx.BITMAP_TYPE_ICO)</span><br><span class="line">self.SetIcon(self.icon)  </span><br></pre></td></tr></table></figure>
<p>但是这样在Pyinstaller生成exe时还得把ico文件附在后面，不能打包进exe，这里的办法是改变代码查找文件的路径，因为exe执行的时候其实是生成了一个临时的文件夹来存放这些依赖文件，所以我们需要告诉程序到这个临时文件夹中去找图标，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resource_path</span>(<span class="params">relative_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Get absolute path to resource, works for dev and for PyInstaller &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># PyInstaller creates a temp folder and stores path in _MEIPASS</span></span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)</span><br></pre></td></tr></table></figure>
<p>调用上面这个函数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.icon = wx.Icon(resource_path(<span class="string">&#x27;icon.ico&#x27;</span>), wx.BITMAP_TYPE_ICO)</span><br><span class="line">self.SetIcon(self.icon)  </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>想看源码的还是请移步我的Github:<a href="https://github.com/crazyczy/njnu-quick-check-results" title="njnu-quick-check-results">njnu-quick-check-results</a></p>
<blockquote>
<p>v3.0</p>
</blockquote>
<p>因为识别验证码要依赖tesseract-ocr这个库，试了一下午都不能把tesseract-ocr这个库也打包进exe，所以用Pyinstaller生成的exe并不能直接用，还是要在客户机上装完tesseract-ocr才能用，所以这次的exe就不放上来了，后面做成web就可以完美避开这个问题了。果然客户端没web有前途……</p>
<blockquote>
<p>正确查询界面</p>
</blockquote>
<p><img src="https://i.imgur.com/JMr5kbD.png" alt=""></p>
<p>客户端版本的应该不会再写了，也没啥好写的了，下一步把这个功能整合到我之前写的那个个人信息查询网站上，那样用起来应该更方便。</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>wxPython</tag>
        <tag>GUI</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现教务系统快速查分（二）</title>
    <url>/2016/10/31/Python%E5%AE%9E%E7%8E%B0%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%BF%AB%E9%80%9F%E6%9F%A5%E5%88%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>上次写的控制台版的教务系统快速查分实在是有点丑，所以在上次的基础之上写了个GUI版的。<br><span id="more"></span></p>
<p>获取数据方面跟上次大同小异，主要是GUI界面的编写，上次第一次写的GUI自己都看不下去了，这次好好研究了一下布局，至少勉强能看了。</p>
<p>布局选用的是GridBagSizer，这是一种多功能sizer，它比FlexiGridSizer提供了更多的增强功能，子构件可被添加到网格中的指定单元格。此外，一个子物件可以在水平或垂直地占据一个以上的单元。 因此，在同一行中的静态文本和多行文本控件可以有不同的宽度和高度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__do_layout</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">    sizer = wx.GridBagSizer(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sizer.Add(self.label_1, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.text_ctrl_1, (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.label_2, (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.text_ctrl_2, (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.label_3, (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.text_ctrl_3, (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.bitmap_button_1, (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.button_1, (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.ALL | wx.ALIGN_RIGHT, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.button_2, (<span class="number">3</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">1</span>), wx.ALL | wx.ALIGN_RIGHT, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.static_bitmap_1, (<span class="number">0</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">1</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.text_ctrl_4, (<span class="number">0</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line">    sizer.Add(self.list_ctrl_1, (<span class="number">4</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">5</span>), wx.EXPAND | wx.ALL, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    sizer.AddGrowableRow(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">    sizer.AddGrowableCol(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    self.panel.SetSizerAndFit(sizer)</span><br></pre></td></tr></table></figure>
<p>以上就是布局部分的代码，AddGrowableRow和AddGrowableCol用来设置可拉伸的行和列。</p>
<p>布完局剩下的就简单了，从输入框获取用户输入的数据然后处理一下返回结果即可。</p>
<p>这里要说一下SetColumnWidth的参数，这个函数是用来设置ListCtrl控件的列宽的，但是这里如果用<code>wx.LIST_AUTOSIZE</code>这个参数只会将表下面的列调整到合适的列宽而表头却不会，所以这里正确的参数应该是用<code>wx.LIST_AUTOSIZE_USEHEADER</code>。</p>
<p>2.0版本就是很普通的一个GUI的查分软件，后来在2.1版本中我把之前写的第一个GUI程序功能也加进来了，就是在查成绩时可以看到自己的证件照，这里因为原先照片有点大如果直接放上去会有点违和，所以我想把原图片先缩小再放上去，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = wx.ImageFromStream(StringIO(req.content), wx.BITMAP_TYPE_ANY)</span><br><span class="line">image = image.Scale(<span class="number">105</span>, <span class="number">147</span>, wx.IMAGE_QUALITY_HIGH)</span><br><span class="line">result = wx.BitmapFromImage(image)</span><br></pre></td></tr></table></figure>
<p>其他好像也没啥好说的了。</p>
<p>想看源码的还是请移步我的Github:<a href="https://github.com/crazyczy/njnu-quick-check-results" title="njnu-quick-check-results">njnu-quick-check-results</a></p>
<blockquote>
<p>v2.1 下载地址</p>
</blockquote>
<p><a href="https://github.com/crazyczy/njnu-quick-check-results/releases/download/2.1/NJNU_Quick_Check_Results_v2.1.GUI.exe" title="NJNU_Quick_Check_Results_v2.1.GUI.exe">NJNU_Quick_Check_Results_v2.1.GUI.exe</a></p>
<p><img src="https://i.imgur.com/p4cBLoj.png" alt=""></p>
<blockquote>
<p>v2.0 下载地址</p>
</blockquote>
<p><a href="https://github.com/crazyczy/njnu-quick-check-results/releases/download/2.0/NJNU_Quick_Check_Results_v2.0.GUI.exe" title="NJNU_Quick_Check_Results_v2.0.GUI.exe">NJNU_Quick_Check_Results_v2.0.GUI.exe</a></p>
<blockquote>
<p>正确查询界面</p>
</blockquote>
<p><img src="https://i.imgur.com/U9hR62a.png" alt=""></p>
<blockquote>
<p>账号或密码输错界面</p>
</blockquote>
<p><img src="https://i.imgur.com/3fdB8pH.png" alt=""></p>
<blockquote>
<p>验证码输错界面</p>
</blockquote>
<p><img src="https://i.imgur.com/L3ZxmMu.png" alt=""></p>
<p>3.0版去掉验证码，加油！</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>wxPython</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现教务系统快速查分（一）</title>
    <url>/2016/10/24/Python%E5%AE%9E%E7%8E%B0%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%BF%AB%E9%80%9F%E6%9F%A5%E5%88%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>每次查成绩都要到学校教务系统那个破网站上点好多次才能看到分数，我就想能不能自己写一个快速查分的脚本呢？找了找没找到api接口，只能自己一步步来获取数据了。<br><span id="more"></span></p>
<p>下面就是教务管理系统的界面，需要学号密码和验证码才能登录。<br><img src="https://i.imgur.com/AKmpyrC.png" alt=""></p>
<p>用浏览器登录一下，然后在后台找到post的数据。<br><img src="https://i.imgur.com/2p53kFx.png" alt=""></p>
<p>username和randnumber也就是验证码提交的都是明文，但是密码是被加密提交的，第一个问题就是找出加密方式，我在js文件里没找到，最后竟然藏在了登录页面里面，这代码写的也是没谁了。<br><img src="https://i.imgur.com/SnAufpo.png" alt=""></p>
<p>验证码的问题暂时先用讨巧的方法来解决的，就是显示出来然后让用户输入一下。</p>
<p>登录进去以后，本以为只需要找到显示成绩的页面再爬取下来分析一下就好了，结果按照以前的方法却不能成功。大概看了一下，发现成绩显示在一个iframe里面，而这个iframe又在另一个iframe里面，如果直接访问那个显示成绩的界面，会跳转到一个错误界面，爬下来的页面也就是那个错误页面，这当然不是我想要的结果。</p>
<p>我试着按照页面执行的顺序依次去提交这几个页面，结果也不行，到了最后那个成绩界面还是有错。后来我想是不是因为数据是异步获取的所以要在Python里面执行js才行，为此我还专门用selenium试了好久，可最终还是没试出来。</p>
<p>就在我快要放弃这一计划的时候，偶然间看到网上一个爬虫的headers里面有一个Referer，而我之前的headers里面只有User-Agent这一项，试着加上了Referer之后再提交竟然成功了！本以为headers只是用来伪装成浏览器，没想到还有这个作用，又get到一条宝贵经验。</p>
<p>有了数据页面接下来就简单多了，以前都是用正则匹配的，这次换了种方法用了更加方便的BeautifulSoup4库。</p>
<p>代码有点长就不贴上来了，想要看源码的请移步我的Github:<a href="https://github.com/crazyczy/njnu-quick-check-results" title="njnu-quick-check-results">njnu-quick-check-results</a></p>
<blockquote>
<p>v1.1 下载地址</p>
</blockquote>
<p><a href="https://github.com/crazyczy/njnu-quick-check-results/releases/download/1.1/NJNU_Quick_Check_Results_v1.1.Console.exe" title="NJNU_Quick_Check_Results_v1.1.Console.exe">NJNU_Quick_Check_Results_v1.1.Console.exe</a></p>
<p>1.1版把输入密码换成了星号显得更加安全，然后加上了验证码和账号密码输错的错误输出，不会像上一个版本直接崩溃。不过两个版本都有一个问题就是最后其实是要按回车键才能退出，写成任意键了……</p>
<blockquote>
<p>正确查询界面</p>
</blockquote>
<p><img src="https://i.imgur.com/kXW5k4P.png" alt=""></p>
<blockquote>
<p>账号或密码输错界面</p>
</blockquote>
<p><img src="https://i.imgur.com/pvp4Yjy.png" alt=""></p>
<blockquote>
<p>验证码输错界面</p>
</blockquote>
<p><img src="https://i.imgur.com/yqgU7h7.png" alt=""></p>
<blockquote>
<p>v1.0 下载地址</p>
</blockquote>
<p><a href="https://github.com/crazyczy/NJNU_Quick_Check_Results/releases/download/1.0/NJNU_Quick_Check_Results_v1.0.Console.exe" title="NJNU_Quick_Check_Results_v1.0.Console.exe">NJNU_Quick_Check_Results_v1.0.Console.exe</a></p>
<p>1.0版只是简单的实现了查询教务系统成绩的功能，没有用GUI界面，没有去掉验证码，也没有加上错误判断。</p>
<blockquote>
<p>正确查询界面</p>
</blockquote>
<p><img src="https://i.imgur.com/vHlV0uY.png" alt=""></p>
<p>最后能获取到成绩还是挺有成就感的，但是现在还是控制台版很丑也不方便，下一步打算在2.0版本做个GUI界面，3.0可以利用图像识别把验证码给去了，然后有时间还可以作为一个功能整合到我之前的那个个人信息查询网站上面。哦对了，我好像还发现教务系统存在越权访问漏洞，理论上我可以获取到全校所有人的成绩，有机会写个爬虫爬一下（逃……</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用wxPython写了一个证件照查看器</title>
    <url>/2016/10/23/%E7%94%A8wxPython%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%AF%81%E4%BB%B6%E7%85%A7%E6%9F%A5%E7%9C%8B%E5%99%A8/</url>
    <content><![CDATA[<p>之前一直写的是在控制台运行的Python程序，昨天突发奇想，能不能用Python写GUI呢？一查还真可以，PyQt，wxPython，TkInter都是不错的库，权衡了一下我决定用wxPython来写点小东西玩一下。<br><span id="more"></span></p>
<p>之前在<a href="/2016/06/03/利用Python爬取学校网站上的证件照（四）/" title="利用Python爬取学校网站上的证件照（四）">利用Python爬取学校网站上的证件照（四）</a>这篇博客里提到学校教务系统存在越权访问漏洞，不如就根据这个来写一个学校证件照查看器吧。</p>
<p>原理很简单，只要根据学号构造出正确的url就可以获取相应的证件照了，难点在于我对于Python的GUI编程一无所知，所以只能一边查文档一边写。</p>
<p>遇到的第一个问题是事件绑定以后的值传递，我把文本框的<code>wx.EVT_TEXT</code>事件和显示图片函数绑定以后，不知道怎么把文本框的值传给函数，因为我需要根据输入值来构造url，所以没有这个值就什么也干不了。后来我发现可以传过来一个CommandEvent类型的东西，再对它<code>GetString()</code>一下就可以获得我想要的值了。</p>
<p>第二个问题是图片的获取问题，<code>wx.Image</code>函数的第一个参数是一个本地图片路径的字符串，可是我的图片是从网上获得的，直接传url给函数会报错。一开始我想先把图片下到本地，然后显示了以后再把本地图片删掉，但是总觉得这样有点蠢，而且如果用户有同名的文件还会误删。后来继续查，发线可以用<code>wx.ImageFromStream</code>这个函数来获取图片流，又解决了一个问题。</p>
<p>最后就是控件的位置摆放了，虽然没几个控件，但要是摆好看还真不容易。用了<code>wx.FlexGridSizer</code>但感觉总得不到我想要的结果，最后干脆直接用绝对坐标写死在代码里了。</p>
<p>代码没多少行，但真的比非GUI的Python程序难写多了，本来Python是一门很简洁的语言，但到了GUI这里就一点都不简洁了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://223.2.10.123/jwgl/photos/rx20&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\</span></span><br><span class="line"><span class="string">/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Frame</span>(<span class="params">wx.Frame</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        wx.Frame.__init__(self, <span class="literal">None</span>, -<span class="number">1</span>, <span class="string">u&#x27;南师大证件照查看器&#x27;</span>,</span><br><span class="line">                          size=(<span class="number">300</span>, <span class="number">360</span>))</span><br><span class="line">        self.Centre()</span><br><span class="line">        hbox = wx.BoxSizer(wx.HORIZONTAL)</span><br><span class="line">        panel1 = wx.Panel(self, -<span class="number">1</span>)</span><br><span class="line">        sizer = wx.FlexGridSizer(<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        basicLabel = wx.StaticText(panel1, -<span class="number">1</span>, <span class="string">u&#x27;请输入要查询的学号：&#x27;</span>)</span><br><span class="line">        basicText = wx.TextCtrl(panel1, -<span class="number">1</span>, size=(<span class="number">100</span>, <span class="number">18</span>))</span><br><span class="line">        basicText.SetInsertionPoint(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.Bind(wx.EVT_TEXT, self.showImage, basicText)</span><br><span class="line"></span><br><span class="line">        sizer.AddMany([basicLabel, basicText])</span><br><span class="line">        hbox.Add(sizer, proportion=<span class="number">2</span>, flag=wx.ALL | wx.EXPAND, border=<span class="number">15</span>)</span><br><span class="line">        panel1.SetSizer(hbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showImage</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        panel2 = wx.Panel(self, -<span class="number">1</span>, (<span class="number">70</span>, <span class="number">50</span>), (<span class="number">150</span>, <span class="number">210</span>))</span><br><span class="line">        panel2.Refresh()</span><br><span class="line">        <span class="built_in">id</span> = text.GetString()</span><br><span class="line">        year = <span class="built_in">id</span>[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">        name = <span class="built_in">id</span> + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        turl = url + year + <span class="string">&#x27;/&#x27;</span> + name</span><br><span class="line">        req = requests.get(turl, headers=header)</span><br><span class="line">        <span class="keyword">if</span> req.headers.get(<span class="string">&#x27;content-length&#x27;</span>) != <span class="string">&#x27;1163&#x27;</span>:</span><br><span class="line">            image = wx.ImageFromStream(</span><br><span class="line">                StringIO(req.content), wx.BITMAP_TYPE_ANY)</span><br><span class="line">            temp = image.ConvertToBitmap()</span><br><span class="line">            wx.StaticBitmap(parent=panel2, bitmap=temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = wx.App()</span><br><span class="line">    frame = Frame()</span><br><span class="line">    frame.Show()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/IUnRHx1.png" alt=""></p>
<p><img src="https://i.imgur.com/ceaTwQT.png" alt=""></p>
<p>跟上次那个校园网自动登录器一样，我也生成了一个exe文件方便没有安装Python环境的用户使用，这次还特地用32位的Python生成的，所以这个exe就能通用了哈哈。</p>
<p><strong>下载地址</strong>：<a href="https://github.com/crazyczy/njnu-passport-inquiry/releases/download/1.0/NJNU_Passport_Inquiry.exe" title="NJNU_Passport_Inquiry.exe">NJNU_Passport_Inquiry.exe</a></p>
<p>因为这个程序太简单，所以wxPython还有很多好玩的的函数我都没有用到，下次写GUI程序的时候再看看吧，不过写GUI真的好晕，就不知道下次什么时候写了……</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>wxPython</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>校园网换了认证页面以后</title>
    <url>/2016/10/22/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%8D%A2%E4%BA%86%E8%AE%A4%E8%AF%81%E9%A1%B5%E9%9D%A2%E4%BB%A5%E5%90%8E/</url>
    <content><![CDATA[<p>之前在<a href="/2016/06/22/用Python写一个校园网自动登录器/" title="用Python写一个校园网自动登录器">用Python写一个校园网自动登录器</a>这篇博客里面完成过一个校园网自动登录器，本来还期待着能用上一段时间，谁知道这才没多久，学校就把认证页面给换了，当然那个登录器也就没用了。<br><span id="more"></span></p>
<p><img src="https://i.imgur.com/6VTXVsf.png" alt=""></p>
<p>新的认证界面如上图，本来以为跟之前那个网页大同小异，结果url就把我吓了一跳，一长串的参数，关键我还找不出这些参数是从哪里获取的。<br><img src="https://i.imgur.com/c9OrpZo.png" alt=""></p>
<p>看参数名字是一些ip地址，mac地址之类的，而且都加过密了，加密方式感觉也各不相同，有长有短。真正的登陆url其实是下面这个，向这个url post一些参数就可以实现登陆。<br><img src="https://i.imgur.com/Y6DozUk.png" alt=""></p>
<p>这些参数里面虽然包含上面url中那堆看不懂的参数，但幸运的是，并不需要改变那些参数值，直接加上账号密码等其他参数一起提交就行了，账号密码也没有加密，都是直接提交的明文，后面的三个参数都是空的，感觉也不重要。<br><img src="https://i.imgur.com/GXhUy87.png" alt=""></p>
<p>最后问题只剩下搞懂那堆参数的含义、获取方式以及加密方式了，然而试了很久发现自己并不能弄得懂。其实弄不懂也没什么关系，我只要把参数一起提交上去就行了，至于这些参数什么含义并不重要。因为那些参数没法在代码里自动获取，只能通过手动复制下来然后写死在代码里，所以可能这样写出来的代码只能固定电脑固定ip使用，这并不是我想要的结果。</p>
<p>然后前两天我突然想到，我们刚上大学那时候锐捷还是要用客户端登录的，为了防止一个账号多人使用还需要绑定mac地址，然而现在账号并不需要绑定mac地址了，那它参数里面提交的macip参数还有什么意义？所以会不会那些参数提不提交都一样，我试着把参数置空再提交，发现并不行，说明至少有一个参数是有用的，没办法只能一个个排除，最后发现只要提交nasip这一个参数就可以了，其余那些参数都可有可无（笑……</p>
<p>至于这个参数什么意思我也不清楚，好像是服务器的ip吧，我拿其他几个同学的电脑都试了一下发现这个值大家都一样，这么看来又可以写出通用的校园网登录器了。</p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Django实现个人信息查询网站（一）</title>
    <url>/2016/09/19/Python+Django%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>总算不像前两天每天都有笔试那么忙了，一闲下来就想找点事情做一下，脑子一抽，之前爬了那么多数据不如来做个查询网站吧。<br><span id="more"></span></p>
<p>之前用Flask搭过一个网站，这次想换个别的框架，由于暑期实习接触过一点Django和Bootstrap，所以决定这次还用Django+Bootstrap来写。</p>
<p>网站的核心功能包括精确查找和模糊查找，精确查找就是对于输入的学号或者姓名进行完全匹配，然后返回该同学的详细信息，模糊查找就是模糊匹配，将与输入的值相近的结果都反映出来供查询者挑选，这时候可以不需要将所有信息全部返回而是只是返回每个符合查找条件的人的概要信息，使用者可以点击其中一个或多个概要信息来查看该同学的详细信息。</p>
<p>目前把网站框架搭起来了，然后只做了精确查找中的一小部分，就是根据学号来查找，上面提到的功能还有很多没写。</p>
<p>这个功能就是根据用户输入的字符串先到数据库中用<code>objects.filter</code>查找是否有该数据项，如果有的话再用<code>objects.get</code>来获取这一行数据写入到字典中，最后把整个字典传给页面显示出来。这里还学到一个东西就是有序字典<code>OrderedDict</code>，可以使我的数据按照顺序在页面上显示而不显得乱糟糟。</p>
<p>上一张目前已有功能的截图——根据学号查询：</p>
<p><img src="https://i.imgur.com/zylHSPT.png" alt=""></p>
<p>本来想一边写一边更新Github的，但是好像因为项目里面照片文件太多，Github老是出错，那就等到最后写完了一起传吧。</p>
<p>除了以上的核心功能，在安全方面加以考虑的话还可以加入验证码来反爬虫，还可以加入注册登录限制查询者的条件，还可以利用图像识别技术来实现以图找图的功能，另外查询的优化也有很大的空间来做，说不定还会丧心病狂的加入类似Facemash的功能，这些等后面有空了接着写，一边写我会一边更新博客，总觉得最后写完是一个很厉害的网站呢，偷笑……</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python处理JSON数据</title>
    <url>/2016/09/06/Python%E5%A4%84%E7%90%86JSON%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>新的学期意味着又有好多新的数据可以爬了。<br><span id="more"></span></p>
<p>在之前那篇<a href="/2016/05/23/利用Python爬取学校网站上的证件照（三）/" title="利用Python爬取学校网站上的证件照（三）">利用Python爬取学校网站上的证件照（三）</a>中我们弄到了14W组学号和姓名的数据，新学期我觉得数据应该更新了，一看果然多了1W多组数据。上次是直接复制下来的，这次我想换个不同的方法。</p>
<p>因为后台的数据是JSON格式的，所以我想能不能直接用JSON库去处理，试了一下果然可以。</p>
<p>代码没有什么难度，就不详细说明了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">csvfile = file(<span class="string">&#x27;info.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">loginurl = <span class="string">&#x27;https://cer.njnu.edu.cn/login&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">logintext = s.get(loginurl).text</span><br><span class="line">lt = re.search(<span class="string">r&#x27;name=&quot;lt&quot;\svalue=&quot;.*&quot;&#x27;</span>, logintext).group(<span class="number">0</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line">execution = re.search(<span class="string">r&#x27;name=&quot;execution&quot;\svalue=&quot;.*&quot;&#x27;</span>,</span><br><span class="line">                      logintext).group(<span class="number">0</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line">_eventId = re.search(<span class="string">r&#x27;name=&quot;_eventId&quot;\svalue=&quot;.*&quot;&#x27;</span>,</span><br><span class="line">                     logintext).group(<span class="number">0</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line">rmShown = re.search(<span class="string">r&#x27;name=&quot;rmShown&quot;\svalue=&quot;.*&quot;&#x27;</span>,</span><br><span class="line">                    logintext).group(<span class="number">0</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">username = raw_input(<span class="string">u&#x27;请输入你的用户名：&#x27;</span>)</span><br><span class="line">password = raw_input(<span class="string">u&#x27;请输入你的密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logindata = &#123;<span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">             <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">             <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">             <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">             <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">             <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">             &#125;</span><br><span class="line">r = s.post(loginurl, logindata)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://urp.njnu.edu.cn/authorizeUsers.portal?limit=200000&#x27;</span></span><br><span class="line">text = s.get(url).text</span><br><span class="line">li=json.loads(text)[<span class="string">&#x27;principals&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> li:</span><br><span class="line">    tmp=[]</span><br><span class="line">    tmp.append(each[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">    tmp.append(each[<span class="string">&#x27;metier&#x27;</span>])</span><br><span class="line">    tmp.append(each[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    tmp.append(each[<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow(tmp)</span><br><span class="line">csvfile.close()</span><br></pre></td></tr></table></figure>
<p>总结一下，要学会多用工具将复杂的事情简单化。</p>
]]></content>
      <categories>
        <category>实战经验</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>写在大四伊始</title>
    <url>/2016/09/01/%E5%86%99%E5%9C%A8%E5%A4%A7%E5%9B%9B%E4%BC%8A%E5%A7%8B/</url>
    <content><![CDATA[<p>一晃又到了开学的日子，不知不觉已经大四了。<br><span id="more"></span><br>昨天刚刚从富士通离职回来，暑期实习的两个月我经历了很多，学到了很多，也算体验了一把以后的生活。虽然只实习了短短的两个月，但真的要走了还是多少会有点舍不得，毕竟一起写过代码，改过BUG。走的时候课长极力挽留我，说希望我开学了以后能继续在那边实习，可是我回来还有课要上，所以只能遗憾的离开。</p>
<p>实习的这两个月，都是在做一个机器学习相关的网站，分为后台API和前台WEB两部分。整个项目都是基于Python的Django框架来做的，后台API部分主要用到了django-rest-framework,django-rest-swagger和django-cors-headers等一系列包，其中django-rest-framework是一个构建符合restful架构的web接口的工具集，django-rest-swagger用了YAML语法来生成整齐的API页面以便于测试，django-cors-headers则是用来解决跨域问题，前台WEB部分除了也用到了django-cors-headers之外还用到了bootstrap框架。这个项目里面的机器学习部分包括LIBSVM,scikit-learn和caffe，其中LIBSVM包括svm，scikit-learn包括svm,decisiontree和randomforest，而caffe主要是用来做deeplearning的。网站功能包括model的上传，修改，删除以及用model来预测数据等等。因为这个网站是一个公司大网站下面的一个小网站，所以这里还用到了单点登录，其中openam用来验证cookie，而openig则是用作反向代理。</p>
<p>因为这次的实习，学校里的工程实训一直都是请假没去的，现在回来了要赶紧把项目做完，不能因为这个耽误了毕业。</p>
<p>现阶段最重要的事还数接下来的秋招了，“金九银十”的秋招黄金季即将到来，我得好好准备一下，希望在秋招结束的时候能给自己能交出一份满意的答卷吧。</p>
<p>新学年新气象，今天是大四开学的第一天，又是一个崭新的开始。</p>
<p>最后，放一张富士通的研发大楼，纪念一下我美好的实习时光。</p>
<p><img src="https://i.imgur.com/4AvJAif.jpg" alt=""></p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>暑期实习有感</title>
    <url>/2016/07/24/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p>一晃已经一个多月没来更博了，趁着这个周末有空，来写点东西。<br><span id="more"></span><br>写完上一篇博客就进入了所谓的期末考试周，天天复习迎考忙的昏天黑地也就没时间写博客了，考完试紧接着又去找了个实习，不得不说这一个月过得真的很充实，嗯。</p>
<p>实习了将近20天了，最大的感受就是公司和学校完全是两码事。学校里老师布置的任务在公司的任务前面简直不值一提，之前还觉得老师布置的任务太难，现在想来还是太年轻。</p>
<p>公司是中日合资公司，所以文档啊，用的软件啊什么的都是日文的，只能逼着自己去适应了。公司离学校比较远，所以路上花的时间有点久，但上班倒不是很累，除了日文看的有些蛋疼。</p>
<p>进公司的时候我说挺喜欢Python的，最好能做跟Python相关的项目，结果正好有一个Django的项目就让我跟着了，想想还是挺幸运的。</p>
<p>Django和Flask都是Python框架，因为之前做过一个Python+Flask框架的小网站，所以对于这个项目不至于一窍不通，一开始去的时候老大先让我自己看已经写过的代码，然后再给我讲不懂的地方，差不多一个星期算是把整个项目大体弄懂了。接下来就是帮着老大测试，改bug，然后再调查一些部署方法什么的，也试着写了一些代码，但自己感觉写的不是很好，接下来我会努力让自己变得更强。</p>
<p>还有一点感触就是我发现单单看Python是不够的，毕竟很少有公司招那种纯Python的工程师，正好这个项目也要用到一些前端的知识，所以我打算最近把前端的东西多看看，一来项目要用，二来以后也多一条路可以选择。打算跟着<a href="https://www.zhihu.com/question/31059577/answer/53109499" title="做web前端开发，培训靠谱还是自学靠谱？——韦捷的回答">做web前端开发，培训靠谱还是自学靠谱？——韦捷的回答</a>这个答案下面的步骤一步步来吧，想想如果能做一个前端工程师也是不错的。</p>
<p>这十几天学到不少东西，毕竟实践出真知，好多平时在学校里老师讲过的东西在试过了之后才能理解的更加深刻。</p>
<p>最后特别感谢一下我的老大，对于我一个新人，没有随便应付了事，而是耐心地给我讲解，让我很是感动，为自己加油！</p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python写了一个校园网自动登录器</title>
    <url>/2016/06/22/%E7%94%A8Python%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E5%99%A8/</url>
    <content><![CDATA[<p>有了前面获得的校园网账号密码以及账号状态，我觉得是时候把它们好好利用起来了，所以就有了下面这个<strong>南师大校园网自动登录器</strong>。<br><span id="more"></span></p>
<p>学校的上网机制是这样的：当你连上校园网后打开任意一个外网网站，浏览器会自动跳转到认证界面<a href="http://portal.njnu.edu.cn/" title="http://portal.njnu.edu.cn/">http://portal.njnu.edu.cn/</a><img src="https://i.imgur.com/rP5HBRW.png" alt=""></p>
<p>输完账号和密码登录以后如果登录成功会跳到学校首页<br><img src="https://i.imgur.com/P8WRRZd.jpg" alt=""></p>
<p>这时候如果再次手动打开认证界面<a href="http://portal.njnu.edu.cn/" title="http://portal.njnu.edu.cn/">http://portal.njnu.edu.cn/</a>就变成了这个样子<br><img src="https://i.imgur.com/M3wv9Qc.png" alt=""></p>
<p>所以我的想法是这样的：</p>
<ol>
<li><p>检测校园网是否已登录，如果已登录就过一段时间再次检测</p>
</li>
<li><p>如果未登录，随机从文件中取一个校园网账号和密码登录前一篇提到的<a href="http://192.168.11.98:8080/selfservice/" title="校园网自助服务">校园网自助服务</a>，获取该账号的状态，包括是否在线以及是否欠费，因为该网站是校内网，所以在不登录的情况下也能正常访问</p>
</li>
<li><p>如果账号同时满足不在线以及不欠费这两个条件，就用该账号来登录刚刚的认证界面，然后回到1（这里如果别人账号已经登录你再登就会把人家挤下线，次数一多就会被发现，所以一定要检测是否在线，至于是否欠费，没钱的话登录会提示欠费）</p>
</li>
<li><p>不满足条件的话就重新从文件中取一个校园网账号和密码直到满足条件为止</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">portal = <span class="string">&#x27;http://portal.njnu.edu.cn/portal_io/login&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://portal.njnu.edu.cn/portal_io/getinfo&#x27;</span></span><br><span class="line">loginurl = <span class="string">&#x27;http://192.168.11.98:8080/selfservice/module/scgroup/web/login_judge.jsf&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">reader = csv.reader(<span class="built_in">open</span>(<span class="string">&quot;id.csv&quot;</span>))</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">if</span> s.get(url).text != <span class="string">u&#x27;&#123;&quot;reply_code&quot;:2,&quot;reply_msg&quot;:&quot;无用户portal信息&quot;&#125;\n&#x27;</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ran = random.randint(<span class="number">0</span>, count - <span class="number">1</span>)</span><br><span class="line">        reader = csv.reader(<span class="built_in">open</span>(<span class="string">&quot;id.csv&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span>, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(reader):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">id</span> == ran:</span><br><span class="line">                xh = line[<span class="number">0</span>]</span><br><span class="line">                mm = line[<span class="number">1</span>]</span><br><span class="line">                s = requests.Session()</span><br><span class="line">                logindata = &#123;</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: xh,</span><br><span class="line">                    <span class="string">&#x27;password&#x27;</span>: mm</span><br><span class="line">                &#125;</span><br><span class="line">                s.post(loginurl, logindata)</span><br><span class="line"></span><br><span class="line">                onlinedevice = s.get(</span><br><span class="line">                    <span class="string">&#x27;http://192.168.11.98:8080/selfservice/module/webcontent/web/onlinedevice_list.jsf&#x27;</span>).text</span><br><span class="line">                consume = s.get(</span><br><span class="line">                    <span class="string">&#x27;http://192.168.11.98:8080/selfservice/module/userself/web/consume.jsf&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">                info = re.search(</span><br><span class="line">                    <span class="string">u&#x27;&lt;td class=&quot;contextDate&quot; style=&quot;border-top: 1px solid #000000;border-top: 1px solid rgba\(0,0,0,0.87\);&quot;&gt;(\r\n(\t|\s)*)*((.|\n)*?)(&amp;nbsp;)?(\r\n(\t|\s)*)*&lt;&#x27;</span>, consume).group(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                on = re.search(<span class="string">u&#x27;上线时间 ：&amp;nbsp;(.*?)&lt;/span&gt;&#x27;</span>, onlinedevice)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(info == <span class="string">u&#x27;正常&#x27;</span>) &amp; (on == <span class="literal">None</span>):</span><br><span class="line">                    logindata2 = &#123;</span><br><span class="line">                        <span class="string">&#x27;username&#x27;</span>: xh,</span><br><span class="line">                        <span class="string">&#x27;password&#x27;</span>: mm</span><br><span class="line">                    &#125;</span><br><span class="line">                    s.post(portal, logindata2)</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>小结一下，</p>
<ol>
<li><p>为了方便没有安装Python环境的用户使用，我还用<a href="http://www.pyinstaller.org/" title="PyInstaller">PyInstaller</a>生成了可执行文件（64位）<img src="https://i.imgur.com/NsTdSFk.png" alt=""></p>
</li>
<li><p>将账号密码明文存取好像不太安全，所以在后来的版本中改成了密文存储，然后在程序中解码后再验证，代码大同小异就不贴了</p>
</li>
</ol>
<p>（2016.10.31更新：因为校园网换了认证机制，所以之前写的这个在宿舍就没有用了，不过在机房还是可以用的……）</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Flask完成的第一个网站</title>
    <url>/2016/05/28/Python+Flask%E5%AE%8C%E6%88%90%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>做网站的缘由来自于这学期一门叫做软件项目管理的课。对于几乎没有任何实战经验的我们，要花一学期模拟一个完整项目的历程，从项目竞标到最后项目上线，而这个网站就是我们小组最后的成果了。<br><span id="more"></span></p>
<p>当初在需求说明书里我们是决定用JSP来写的，因为这学期我们也学JSP这门课，所以正好现学现用。无奈我JSP学的太烂，实在是拿不出手。正好最近看了点Flask，手有点痒，也想趁这个机会锻炼一下，于是决定用Python+Flask来试一下。更改技术方案在真正的项目是重大事故，但老师说我们这个是模拟，就不计较了。</p>
<p>首先感谢一下女朋友写的前端页面，我是在她写的前端页面的基础上加上了后台然后略加修改做成的网站，这里面她功不可没。</p>
<p>网站其实不是很复杂，用到数据库的主要是三个模块，一是注册登录，二是成绩管理，三是留言板。</p>
<p>在连数据库的时候卡了挺久，一开始我是打算用<a href="http://docs.jinkan.org/docs/flask/patterns/sqlite3.html" title="SQLite3">SQLite3</a>这个Python自带库的，后来发现了更好用的<a href="http://docs.jinkan.org/docs/flask/patterns/sqlalchemy.html" title="SQLAlchemy">SQLAlchemy</a>库就抛弃了<a href="http://docs.jinkan.org/docs/flask/patterns/sqlite3.html" title="SQLite3">SQLite3</a>。因为是第一次连数据库，遇到了不少困难，后来对着官方文档，再去查资料，最后总算一点点解决了。</p>
<p>我觉得<a href="http://docs.jinkan.org/docs/flask/patterns/sqlalchemy.html" title="SQLAlchemy">SQLAlchemy</a>的好处在于它把数据库中的表抽象成了类，每一个表就是一个类，方便管理操作。所以我需要的三个数据表其实就是三个类，这样一来事情就简单多了。</p>
<blockquote>
<p>注册登录</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">120</span>))</span><br><span class="line">    password = db.Column(db.String(<span class="number">120</span>))</span><br><span class="line">    email = db.Column(db.String(<span class="number">240</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    select = db.Column(db.Integer)  <span class="comment"># 选课状态，0未选，1已选未确认，2已选已确认</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, email, password, select</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self.set_password(password)</span><br><span class="line">        self.select = select</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_password</span>(<span class="params">self, password</span>):</span></span><br><span class="line">        self.password = generate_password_hash(password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_password</span>(<span class="params">self, password</span>):</span></span><br><span class="line">        <span class="keyword">return</span> check_password_hash(self.password, password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r&gt;&#x27;</span> % self.name</span><br></pre></td></tr></table></figure>
<p>这个User类就是用户信息表，包括了用户名，密码，邮箱和选课状态，其中选课状态是选课模块用的。为了安全起见，密码用的hash加密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_user_status</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user_email&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        session[<span class="string">&#x27;user_email&#x27;</span>] = <span class="literal">None</span></span><br><span class="line">        session[<span class="string">&#x27;user_name&#x27;</span>] = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>刚开始检测<code>session</code>中是否有<code>user_name</code>，如果没有，将<code>session</code>中的<code>user_email</code>和<code>user_name</code>设为空。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user_email&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user = User.query.filter_by(email=form.email.data).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> user.check_password(form.password.data):</span><br><span class="line">            session[<span class="string">&#x27;user_email&#x27;</span>] = form.email.data</span><br><span class="line">            session[<span class="string">&#x27;user_name&#x27;</span>] = user.name</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">u&#x27;对不起，用户不存在或密码错误！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure>
<p>登录——检测用户所输入的邮箱和密码是否与数据库中的匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/signup&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signup</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user_email&#x27;</span>]:</span><br><span class="line">        flash(<span class="string">u&#x27;你已经注册过了！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line">    form = SignupForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user_email = User.query.filter_by(email=form.email.data).first()</span><br><span class="line">        <span class="keyword">if</span> user_email <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            user = User(form.name.data, form.email.data,</span><br><span class="line">                        form.password.data, form.select)</span><br><span class="line">            db.session.add(user)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            session[<span class="string">&#x27;user_email&#x27;</span>] = form.email.data</span><br><span class="line">            session[<span class="string">&#x27;user_name&#x27;</span>] = form.name.data</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">u&#x27;该邮箱已被注册，请重新选择一个！&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            render_template(<span class="string">&#x27;signup.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;signup.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure>
<p>注册——先检验用户输入是否合法，合法则加入到数据库中，否则让用户重输。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;user_email&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    session.pop(<span class="string">&#x27;user_name&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(request.referrer <span class="keyword">or</span> url_for(<span class="string">&#x27;home&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>注销——将<code>session</code>中的<code>user_email</code>和<code>user_name</code>置为空并回到首页。</p>
<blockquote>
<p>成绩管理</p>
</blockquote>
<p>这里用到了<a href="http://flask-excel.readthedocs.io/en/latest/" title="Flask-Excel">Flask-Excel</a>这个模块，需求里面本来很复杂的上传excel文件导入成绩因为有了这个就简单多了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">80</span>))</span><br><span class="line">    middlegrade = db.Column(db.Integer)</span><br><span class="line">    finalgrade = db.Column(db.Integer)</span><br><span class="line">    grade = db.Column(db.Integer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, <span class="built_in">id</span>, name, middlegrade, finalgrade, grade=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.middlegrade = middlegrade</span><br><span class="line">        self.finalgrade = finalgrade</span><br><span class="line">        grade = <span class="built_in">int</span>(<span class="number">0.3</span> * middlegrade + <span class="number">0.7</span> * finalgrade + <span class="number">0.5</span>)</span><br><span class="line">        self.grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Post %r&gt;&#x27;</span> % self.name</span><br></pre></td></tr></table></figure>
<p>Post是成绩类，包括姓名，期中成绩，期末成绩和总成绩，其中总成绩是根据期中成绩和期末成绩计算出来的，导入的文件中可以不需要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dodelete</span>():</span></span><br><span class="line">    Post.query.delete()</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;grades&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>导入和导出都是直接用的<a href="http://flask-excel.readthedocs.io/en/latest/" title="Flask-Excel">Flask-Excel</a>里面的函数，没啥说的，这里说一下删除。这也是我卡的比较久的一个地方，因为少了<code>db.session.commit()</code>，所以其实每次删除都只是删除了<code>session</code>里面的数据而数据库中的数据并没有删掉，所以一刷新还是会有，后来发现是删除后没有提交，加上<code>db.session.commit()</code>就OK了。</p>
<blockquote>
<p>留言板</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">240</span>))</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line">    date = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, body</span>):</span></span><br><span class="line">        self.email = session[<span class="string">&#x27;user_email&#x27;</span>]</span><br><span class="line">        self.title = title</span><br><span class="line">        self.body = body</span><br><span class="line">        self.date = (datetime.utcnow() + timedelta(hours=<span class="number">8</span>)).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Thread Title %r&gt;&#x27;</span> % self.title</span><br></pre></td></tr></table></figure>
<p>留言板的数据库也大同小异，但其中留言时间用<code>datetime.utcnow()</code>获取到的是标准时而不是本地时间，用<code>timedelta()</code>函数解决即可，然后去掉后面的微秒显示成正常的时间格式。</p>
<p>其余没用到数据库的太简单就不说了。</p>
<p><del>最后由于老师要求部署到服务器，所以我挂到了服务器上，网站地址是<a href="http://spm.chaiziyi.com.cn/" title="http://spm.chaiziyi.com.cn/">http://spm.chaiziyi.com.cn/</a>。</del>（2016.10.31更新：为了部署另一个Django网站，把服务器搞崩了，之前的这个网站就访问不了了，本来还想有空再部署上去的，但是看了眼自己以前写的烂代码，还是算了……）网站部署可参照<a href="http://www.cnblogs.com/Ray-liang/p/4173923.html" title="阿里云部署 Flask + WSGI + Nginx 详解">阿里云部署 Flask + WSGI + Nginx 详解</a>这篇文章。</p>
<p>源码及使用说明见<a href="https://github.com/crazyczy/spm-web" title="https://github.com/crazyczy/spm-web">https://github.com/crazyczy/spm-web</a></p>
<p>从这次写网站的经历中学到了好多东西，包括<a href="http://docs.jinkan.org/docs/flask/patterns/sqlalchemy.html" title="SQLAlchemy">SQLAlchemy</a>的使用等等，当然最大的收获还是学会了如何部署Flask项目到服务器，虽然部署时磕磕绊绊，但是有了第一次部署的经验，以后应该都会简单多了吧。</p>
]]></content>
      <categories>
        <category>项目成果</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>我与Python的缘分</title>
    <url>/2016/05/15/%E6%88%91%E4%B8%8EPython%E7%9A%84%E7%BC%98%E5%88%86/</url>
    <content><![CDATA[<p>大学时光美好而短暂，一晃都大三了，感觉自己什么都还不会。<br><span id="more"></span><br>可毕竟是计算机专业的，总不能等到毕业还啥都不会吧，毕竟还要靠这个混口饭吃，不管怎么说总得学点什么，但C++或者Java什么的都感觉好难，直到有一天我知道了Python。</p>
<p>第一次知道Python应该是大二寒假，当时在家无聊，想写个爬虫来爬照片所以知道了Python，但因为水平实在有限最后还是不了了之了，这个后面再讲。</p>
<p>后来过了一年，到了大三寒假，在家又无聊了，就想把Python拿出来好好学学，也看看有没有机会把一年前未完成的爬照片的任务完成掉（事实证明我还是太年轻，基础都没弄懂就想写爬虫还是太年轻）。</p>
<p>因为不了解Python，也不知道如何下手，但大部分的资料里面都推荐了<a href="https://book.douban.com/subject/3112503/" title="Python核心编程（第二版）">Python核心编程（第二版）</a>这本书，一开始还好，渐渐的就觉得看不懂了，再后来就放弃了，600多页的书才看了100页，真是惭愧。在家觉得看书太累，想先找点教学视频看看。去知乎一搜，发现了<a href="https://www.coursera.org/learn/hipython" title="用 Python 玩转数据">用 Python 玩转数据</a>这门课，这门课是介绍的Python的科学计算，并不是讲Python入门的，但因为讲的还算生动有趣，我也勉强算是看完了。说来有一点要感谢这门课，就是让我知道了一个非常好用的Python开发工具<a href="https://python-xy.github.io/" title="python(x,y)">python(x,y)</a>，其实更准确的说是里面的<a href="https://github.com/spyder-ide/spyder" title="Spyder">Spyder</a>非常的好用，这门课最大的收获也就如此。不要小看了一个IDE，之前我就是一边看书一边用Python自带的IDLE编程编的放弃了，而且什么第三方库都要自己装，Windows下面装个软件又超级烦，但是，自从用了Spyder，效率提高了不说，兴趣也增长了不少。</p>
<p>再然后就开学了，托Spyder的福，这时候的我已经沉迷于Python的世界不能自拔了。这时候我觉得自己需要一整套的学习计划了，然后我就找到了萧大的<a href="https://zhuanlan.zhihu.com/p/19959253" title="编程入门指南">编程入门指南</a>，入门指南里又提到了<a href="https://book.douban.com/subject/3112503/" title="Python核心编程（第二版）">Python核心编程（第二版）</a>，这次我总算是把600多页都看完了，没有再半途而废。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2016/05/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>花了一天多时间，勉强算是搭了个自己的独立博客。<br><span id="more"></span><br>也是偶然看到一篇基于Hexo框架+GitHub Pages搭建个人博客的文章，就心血来潮想搭建个博客玩玩，毕竟作为一名准程序猿，还没有属于自己的博客，而且总觉得用现成的博客网站写博客对不住自己高冷的身份。嗯，我就是这么高冷。</p>
<p>所以从今天起，我也是有博客的人了，以后尽量多把自己的学习心得和体会写进来吧，时间长了肯定也是一笔不小的财富呢，想想还有点小激动。</p>
<p>关于搭建个人博客，可以参考一下<a href="http://sunwhut.com/2015/10/30/buildBlog/" title="如何利用GitHub Pages和Hexo快速搭建个人博客"><del>利用GitHub Pages和Hexo快速搭建个人博客</del></a>(链接已失效)这篇文章。</p>
<p>今天就先写这么多吧。 </p>
]]></content>
      <categories>
        <category>日常心得</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
